# -*- coding: utf-8 -*-
"""Breas Cancer Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/GNAVEEN13/python-random-quote/blob/master/Breas_Cancer_Detection.ipynb

# **Breas Cancer Detection with Logistic Regression**
"""

#import libraries 
import numpy as np
import sklearn.datasets

#getting the dataset
breast_cancer=sklearn.datasets.load_breast_cancer()

print(breast_cancer)

x=breast_cancer.data
y=breast_cancer.target

print(x)
print(y)

print(x.shape,y.shape)

"""import data to the pandas dataframe"""

import pandas as pd

data=pd.DataFrame(breast_cancer.data,columns = breast_cancer.feature_names)

data['class']=breast_cancer.target

data.head()

print(data['class'].value_counts())

print(breast_cancer.target_names)

data.groupby('class').mean()

"""0-malignant
1-benign

Train and Test Split
"""

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y)

print(y.shape,y_train.shape,y_test.shape)

print(x.shape,x_train.shape,x_test.shape)

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1)
# test_size--> to specify the percentage of  test data needed

print(y.shape,y_train.shape,y_test.shape)

print(y.mean(),y_train.mean(),y_test.mean())

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1,stratify=y)
# stratify --> for correct distribution of the data as of the original data

print(y.mean(),y_train.mean(),y_test.mean())

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1,stratify=y,random_state = 1)
#random_state --> specific split of the data.each data value of random_state split the data differently

print(x_train.mean(),x_test.mean(),x.mean())

print(x_train)

""" **Logistic Regression**"""

# import logistic regression from sklearn
from sklearn.linear_model import LogisticRegression

classifier=LogisticRegression() # load the logistic regression model to the variable 'classifier'

classifier.fit?

classifier.fit(x_train,y_train)

"""**Evaluation of the model**"""

# import accuracy_score
from sklearn.metrics import accuracy_score

#prediction on train data
prediction_on_training_data=classifier.predict(x_train)
accuracy_on_training_data=accuracy_score(y_train,prediction_on_training_data)

print('Accuracy on training data:',accuracy_on_training_data)

# prediction on test data
prediction_on_test_data=classifier.predict(x_test)
accuracy_on_test_data=accuracy_score(y_test,prediction_on_test_data)

print('Accuracy on training data:',accuracy_on_test_data)

"""detecting whether the patient has breast cancer in benign or malignant stage"""

input_data=(17.99,10.38,122.8,1001,0.1184,0.2776,0.3001,0.1471,0.2419,0.07871,1.095,0.9053,8.589,153.4,0.006399,0.04904,0.05373,0.01587,0.03003,0.006193,25.38,17.33,184.6,2019,0.1622,0.6656,0.7119,0.2654,0.4601,0.1189)
#change the input to numpy_array to make prediction
input_data_as_numpy_array=np.asarray(input_data)
print(input_data)
# reshape the array as we are predictinng the output for one instance
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)

#prediction
prediction=classifier.predict(input_data_reshaped)
print(prediction)#returns a list with element[0] if malignant; return a list with element[1] if benign
if (prediction[0]==0):
  print("breast cancer is malignant")
else:
  print('breast cancer is benign')

